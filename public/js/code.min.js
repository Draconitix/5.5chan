var app=angular.module("Chan",["ngResource","ui.router","ngCookies"]);app.config(function($interpolateProvider){$interpolateProvider.startSymbol("{[{"),$interpolateProvider.endSymbol("}]}")}),app.config(["$qProvider",function($qProvider){$qProvider.errorOnUnhandledRejections(!1)}]),app.config(function($stateProvider){$stateProvider.state("login",{url:"/login",templateUrl:"/partials/login.html",controller:"loginState"}).state("register",{url:"/register",templateUrl:"/partials/register.html",controller:"registerState"}).state("interface",{url:"/interface",templateUrl:"/partials/interface.html",controller:"interfaceState"})}).run(function($state){$state.go("test")}),app.controller("interfaceState",function($scope,$state,logout,$cookies){void 0==$cookies.get("accessToken")&&$state.go("login"),$scope.posts=[],$scope.logout=function(){$cookies.remove("accessToken"),$state.go("login")}}),app.controller("loginCon",function(login,$scope,$state,formInputValidate){void 0!=$cookies.get("accessToken")&&$state.go("interface"),$scope.loginMain=function(){var errors=formInputValidate($scope.user);0==errors.num?login($scope.user).then(function(response){$state.go("interface")},function(error){console.log(error)}):$scope.errors=errors},$scope.user={},$scope.errors={},$scope.validate=function(input,field){var obj={};obj[field]=input;var errs=formInputValidate(obj);errs.num>0&&($scope.errors[field]=errs[field])}}),app.controller("registerState",function($scope,$state,register,formInputValidate){void 0!=$cookies.get("accessToken")&&$state.go("interface");var formData=new FormData;$scope.currentFile="",$scope.user={},$scope.errors={},$scope.changeFile=function(files){$scope.currentFile=files[0]},$scope.validate=function(input,field){var obj={};obj[field]=input;var errs=formInputValidate(obj);errs.num>0&&($scope.errors[field]=errs[field]),$scope.$apply()},$scope.register=function(){var errors=formInputValidate($scope.user);0==/(\.jpg|\.JPG|\.JPEG|\.jpeg|\.png|\.PNG|\.gif|\.GIF)$/g.test($scope.currentFile.name)&&""!=$scope.currentFile&&(errors.num=1,$scope.errors.profile="Profile image must be a image file"),0==errors.num?(formData.append("username",$scope.user.username),formData.append("password",$scope.user.password),formData.append("email",$scope.use.email),formData.append("firstname",$scope.user.firstname),formData.append("lastname",$scope.user.lastname),formData.append("desc",$scope.user.desc),""!=$scope.currentFile&&formData.append("profile",$scope.currentFile),register(formData).then(function(response){$state.go("profile")},function(error){console.log(error)})):($scope.errors=errors,0==/(\.jpg|\.JPG|\.JPEG|\.jpeg|\.png|\.PNG|\.gif|\.GIF)$/g.test($scope.currentFile.name)&&""!=$scope.currentFile&&($scope.errors.profile="Profile image must be a image file"))}}),app.controller("test",["$scope","universal",function($scope,universal){$scope.assets=universal.query(),$scope.test="Watch your profanity."}]),app.service("formInputValidate",function(){var fields,data,errorNum=0,errors={username:"",password:"",email:"",firstname:"",lastname:"",desc:""},checkSwitch=function(field){switch(field){case"username":data[field].length<4?(errorNum++,errors[field]="Username must have at least 4 characters."):data[field].length>12&&(errorNum++,errors[field]="Username must be less than 13 characters.");break;case"password":data[field].length<6&&(errorNum++,errors[field]="Password must be at least 6 characters.");break;case"email":0==/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(data[field])&&(errorNum++,errors[field]="Email must be a valid email.");break;case"desc":data[field].length<4&&(errorNum++,errors[field]="Description must be at least 4 characters.");break;case"firstname":data[field].length>12&&(errorNum++,errors[field]="Firstname must be less than 13 characters.");break;case"lastname":data[field].length>12&&(errorNum++,errors[field]="Lastname must be less than 13 characters.")}};return function(obj){fields=Object.keys(obj),data=obj;for(var i=0;i<fields.length;i++)if(0==data[fields[i]].length||""==data[fields[i]]||void 0==data[fields[i]]){errorNum++;var cap=fields[i].charAt(0).toUpperCase()+fields[i].slice(1);errors[fields[i]]=cap+" must not be empty."}else"email"==fields[i]||"desc"==fields[i]?checkSwitch(fields[i]):(checkSwitch(fields[i]),1==/[.!@#$%^&*()_+-=]/g.test(data[fields[i]])&&(errorNum++,cap=fields[i].charAt(0).toUpperCase()+fields[i].slice(1),errors[fields[i]]=cap+" must not contain any special characters."));return errors.num=errorNum,errors}}),app.service("login",["$http","$q","$cookies",function($http,$q,$cookies){return function(user){var deferred=$q.defer();return $http({method:"POST",url:"chat/user/login",data:user}).then(function(response){$cookies.put("accessToken",response),deferred.resolve(response)},function(err){deferred.reject(err)}),deferred.promise}}]),app.service("register",["$http","$q","$cookies",function($http,$q,$cookies){return function(user){var deferred=$q.defer();$http({method:"POST",url:"chat/user/register",headers:{"Content-Type":"multipart/form-data"},data:user}).then(function(response){$cookies.put("accessToken",response),deferred.resolve(response)},function(err){deferred.reject(err)})}}]),app.service("userSocket",function($cookies){return io.connect("http://localhost:9000",{query:"token="+$cookies.get("accessToken")})});