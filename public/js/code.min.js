var app=angular.module("Chan",["ngResource","ui.router","ngCookies","angular-jwt","ngDialog","uiCropper"]);app.config(function($interpolateProvider){$interpolateProvider.startSymbol("{[{"),$interpolateProvider.endSymbol("}]}")}),app.config(["$qProvider",function($qProvider){$qProvider.errorOnUnhandledRejections(!1)}]),app.config(function(ngDialogProvider){ngDialogProvider.setForceBodyReload(!0)}),app.config(function($stateProvider){$stateProvider.state("login",{url:"/login",templateUrl:"/partials/login.html",controller:"loginState"}).state("register",{url:"/register",templateUrl:"/partials/register.html",controller:"registerState"}).state("interface",{url:"/interface",templateUrl:"/partials/interface.html",controller:"interfaceState"}).state("profile",{url:"/profile",templateUrl:"/partials/profile.html",controller:"profileState"})}).run(function($state){$state.go("login")}),app.controller("interfaceState",function($scope,$state,logout,$cookies){void 0==$cookies.get("accessToken")&&$state.go("login"),$scope.posts=[],$scope.logout=function(){$cookies.remove("accessToken"),$state.go("login")}}),app.controller("loginState",function(login,$scope,$state,formInputValidate,$cookies){void 0!=$cookies.get("accessToken")&&$state.go("interface"),$scope.loginMain=function(){var errors=formInputValidate($scope.user);0==errors.num?login($scope.user).then(function(response){$state.go("profile")},function(error){console.log(error)}):$scope.errors=errors},$scope.user={},$scope.errors={},$scope.validate=function(input,field){var obj={};if(obj[field]=input,void 0!=input){var errs=formInputValidate(obj);errs.num>0&&($scope.errors[field]=errs[field],console.log(JSON.stringify(errs[field])))}}}),app.controller("profileState",function($scope,$cookies,jwtHelper,$state,assets,ngDialog,profile,formInputValidate){void 0==$cookies.get("accessToken")&&$state.go("login");var token=$cookies.get("accessToken");$scope.user=jwtHelper.decodeToken(token),$scope.eUser=angular.copy($scope.user),$scope.userImgUri="",$scope.imgUriFolder="",$scope.imgType="",$scope.editing=!1,$scope.errors={},$scope.toggleEdit=function(){0==$scope.editing?$scope.editing=!0:$scope.editing=!1},$scope.saveCrop=function(){assets.crop($scope.user.username,$scope.cropped.image).then(function(response){console.log(response)},function(err){console.log(err)}),ngDialog.closeAll(),$scope.userImgUri=$scope.cropped.image},$scope.crop=function(){ngDialog.open({template:"partials/cropper.html",scope:$scope,width:"100vw",height:"70vh",showClose:!1})},$scope.validate=function(input,field){var obj={};if(obj[field]=input,void 0!=input){var errs=formInputValidate(obj);errs.num>0?($scope.errors[field]=errs[field],console.log(JSON.stringify(errs[field]))):$scope.errors[field]=""}},assets.get($scope.user.username,"profile").then(function(response){1==response.thumb?(1==response.cropped?$scope.userImgUri=response.uri+"cropped.png":$scope.userImgUri=response.uri+"default."+response.type,$scope.imgUriFolder=response.uri,$scope.imgType=response.type,$scope.cropped={source:response.uri+"scaled."+response.type},console.log(response)):$scope.userImgUri=response.uri+"original."+response.type},function(err){console.log(err)})}),app.controller("registerState",function($scope,$state,register,formInputValidate,$cookies){void 0!=$cookies.get("accessToken")&&$state.go("interface");var formData=new FormData;$scope.currentFile="",$scope.user={username:"",password:"",email:"",desc:""},$scope.errors={},$scope.changeFile=function(files){$scope.currentFile=files[0],$scope.$apply()},$scope.validate=function(input,field){var obj={};if(obj[field]=input,void 0!=input){var errs=formInputValidate(obj);errs.num>0?($scope.errors[field]=errs[field],console.log(JSON.stringify(errs[field]))):$scope.errors[field]=""}},$scope.register=function(){var errors=formInputValidate($scope.user);0==/(\.jpg|\.JPG|\.JPEG|\.jpeg|\.png|\.PNG|\.gif|\.GIF)$/g.test($scope.currentFile.name)&&""!=$scope.currentFile&&(errors.num+=1,$scope.errors.profile="Profile image must be a image file"),0==errors.num?(formData.append("username",$scope.user.username),formData.append("password",$scope.user.password),formData.append("email",$scope.user.email),formData.append("desc",$scope.user.desc),""!=$scope.currentFile&&formData.append("profile",$scope.currentFile),register(formData).then(function(response){$state.go("profile"),$scope.user={username:"",password:"",email:"",desc:""}},function(error){console.log(error)})):($scope.errors=errors,0==/(\.jpg|\.JPG|\.JPEG|\.jpeg|\.png|\.PNG|\.gif|\.GIF)$/g.test($scope.currentFile.name)&&""!=$scope.currentFile&&($scope.errors.profile="Profile image must be a image file"))}}),app.controller("test",["$scope","universal",function($scope,universal){$scope.assets=universal.query(),$scope.test="Watch your profanity."}]),app.service("assets",function($cookies,$http,$q){var token=$cookies.get("accessToken");return void 0==token?null:{get:function(username,locat){var deferred=$q.defer();return $http({method:"GET",url:"chat/asset/lst",params:{user:username,location:locat},headers:{Authorization:"Bearer "+token}}).then(function(response){console.log(response),"profile"==locat?deferred.resolve(response.data[0]):deferred.resolve(response.data)},function(err){deferred.reject(err)}),deferred.promise},crop:function(username,data){var deferred=$q.defer();return $http({method:"POST",url:"chat/asset/crop",data:{user:username,data:data},headers:{Authorization:"Bearer "+token}}).then(function(response){console.log(response),deferred.resolve(response.data)},function(err){deferred.reject(err)}),deferred.promise}}}),app.service("editProfile",function($http,$q,$cookies){var token=$cookies.get("accessToken");return function(userData){var deferred=$q.defer();return $http({method:"PUT",url:"chat/user/update",headers:{Authorization:"Bearer "+token},data:userData}).then(function(response){deferred.resolve(response.data),$cookies.put("accessToken",response.data.token)},function(err){deferred.reject(err)}),deferred.promise}}),app.service("formInputValidate",function($http,$q,$cookies){var fields,data,errorNum=0,errors={username:"",password:"",email:"",firstname:"",lastname:"",desc:""},checkSwitch=function(field){switch(field){case"username":data[field].length<4?(errorNum++,errors[field]="Username must have at least 4 characters."):data[field].length>12&&(errorNum++,errors[field]="Username must be less than 13 characters.");break;case"password":data[field].length<6&&(errorNum++,errors[field]="Password must be at least 6 characters.");break;case"email":0==/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(data[field])&&(errorNum++,errors[field]="Email must be a valid email.");break;case"desc":data[field].length<4&&(errorNum++,errors[field]="Description must be at least 4 characters.");break;case"firstname":data[field].length>12&&(errorNum++,errors[field]="Firstname must be less than 13 characters.");break;case"lastname":data[field].length>12&&(errorNum++,errors[field]="Lastname must be less than 13 characters.")}};return function(obj){if(errors={username:"",password:"",email:"",firstname:"",lastname:"",desc:""},errorNum=0,fields=Object.keys(obj),data=obj,fields.length>0)for(var i=0;i<fields.length;i++)if(0==data[fields[i]].length||""==data[fields[i]]||void 0==data[fields[i]]){errorNum++;var cap=fields[i].charAt(0).toUpperCase()+fields[i].slice(1);errors[fields[i]]=cap+" must not be empty."}else"email"==fields[i]||"desc"==fields[i]?checkSwitch(fields[i]):(checkSwitch(fields[i]),1==/[.!@#$%^&*()_\+\-\=]/g.test(data[fields[i]])&&(errorNum++,cap=fields[i].charAt(0).toUpperCase()+fields[i].slice(1),errors[fields[i]]=cap+" must not contain any special characters."));else errorNum++,errors.main="Fields must not be empty.";return errors.num=errorNum,errors}}),app.service("login",["$http","$q","$cookies",function($http,$q,$cookies){return function(user){var deferred=$q.defer();return $http({method:"POST",url:"chat/user/login",data:user}).then(function(response){$cookies.put("accessToken",response.data.token),deferred.resolve(response)},function(err){deferred.reject(err)}),deferred.promise}}]),app.service("messageParser",function(){var partsArray=[],txt={group:[],add:function(){if(txt.group.length>0){var fullText=txt.group[0];if(txt.group.length>1){for(var i=1;i<txt.group.length;i++)fullText=fullText.concat(" ",txt.group[i]);partsArray.push({type:"text",text:fullText}),txt.group=[]}else partsArray.push({type:"text",text:fullText}),txt.group=[]}}},parse=function(part){if(1==/^(http:\/\/|https:\/\/)/g.test(part)){var imgSplit=part.split(".");imgSplit[imgSplit.length-1].toLowerCase();if(/(www\.youtube\.com\/)/g.test(part))if(txt.add(),part.indexOf("watch?v=")>-1){var idSplit=part.split("watch?v=");partsArray.push({type:"video",url:"https://www.youtube.com/embed/"+idSplit[1]})}else partsArray.push({type:"video",url:part});else 1==/(jpg|jpeg|png|gif)/g.test(part)?(txt.add(),partsArray.push({type:"image",url:part})):(txt.add(),partsArray.push({type:"hyperlink",url:part}))}else txt.group.push(part)};return function(text){partsArray=[];for(var partition=text.split(" "),i=0;i<partition.length;i++)if(parse(partition[i]),i==partition.length-1)return txt.add(),partsArray}}),app.service("profile",function($http,$q,$cookies){var token=$cookies.get("accessToken");return function(data){var deferred=$q.defer();return $http({method:"POST",url:"chat/user/edit",data:data,headers:{Authorization:"Bearer "+token}}).then(function(response){$cookies.remove("accessToken"),$cookies.put("accessToken",response.data.token),deferred.resolve(response)},function(err){deferred.reject(err)}),deferred.promise}}),app.service("register",["$http","$q","$cookies",function($http,$q,$cookies){return function(user){var deferred=$q.defer();return $http({method:"POST",url:"chat/user/register",transformRequest:angular.identity,headers:{"Content-Type":void 0},data:user}).then(function(response){$cookies.put("accessToken",response.data.token),deferred.resolve(response)},function(err){deferred.reject(err)}),deferred.promise}}]),app.service("userSocket",function($cookies){return io.connect("http://localhost:9000",{query:"token="+$cookies.get("accessToken")})});